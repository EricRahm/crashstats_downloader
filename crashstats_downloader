#!/usr/bin/env python3
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

import asyncio
import aiohttp
import gzip
import json

import pprint
import requests

API_KEY="YOUR_API_KEY_HERE"
QUERY="https://crash-stats.mozilla.com/api/SuperSearch/?product=Firefox&version=47.0.1&signature=%3DOOM%20%7C%20small&contains_memory_report=%21__null__&_columns=uuid&_results_number=500"

def dump_url(uuid):
    return "https://crash-stats.mozilla.com/api/UnredactedCrash/?crash_id=%s" % uuid


headers = {'Auth-Token': API_KEY}
s = requests.session()

uuids_response = s.get(QUERY).json()
uuids = [ x['uuid'] for x in uuids_response['hits'] ]

pprint.pprint(uuids)

async def fetch_memory_report(session, url):
    with aiohttp.Timeout(60):
        async with session.get(url, headers=headers) as response:
            try:
                resp = await response.json()
            except:
                print("Failed to download %s" % url)
                print(await response.text())
                return False

            uuid = resp['uuid']
            print("uuid = %s, crash date = %s" % (uuid, resp['client_crash_date']))
            with gzip.open("%s.json.gz" % uuid, 'wt') as f:
                json.dump(resp['memory_report'], f)

            return True


async def gather_memory_reports(loop, uuids):
    with aiohttp.ClientSession(loop=loop) as session:
        tasks = [ asyncio.ensure_future(fetch_memory_report(session, dump_url(uuid))) for uuid in uuids ]
        responses = await asyncio.gather(*tasks)

    for response in responses:
        print(response)


loop = asyncio.get_event_loop()
future = asyncio.ensure_future(gather_memory_reports(loop, uuids))
loop.run_until_complete(future)
